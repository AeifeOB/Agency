name: Build dotnet package

on: [push, pull_request]

jobs:
  # Test a Linux deployment
  test_linux:

    name: Test_Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['5.0.x' ]

    env:
      Solution_Name: Agency.sln                         
      Test_Project_Path: Agency.Test\Agency.Test.csproj

    steps:
      - uses: actions/checkout@v2

      # Install the .NET Core workload
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      # Install any dependencies
      - name: Install dependencies
        run: dotnet restore

      # Restore the project
      - name: Build
        run: dotnet build --configuration Release --no-restore

      # Test the project
      - name: Test
        run: dotnet test -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=opencover --verbosity normal 

      -name: Look for test results
       run: ls * 
       
      -name: Look for test results
       run: ls /home/runner/work/Agency/Agency/Test/ 

      -name: Look for test results
       run: ls /home/runner/work/Agency/Agency/Test/Test.csproj/ 

      -name: Look for test results
       run: ls /home/runner/work/Agency/Agency/Test/Test.sln/ 
      
      # Create Coverage badge
      - name: Create Test Coverage Badge
        uses: simon-k/dotnet-code-coverage-badge@v1.0.0
        id: create_coverage_badge
        with:
          label: Unit Test Coverage
          color: brightgreen
          path: /home/runner/work/Agency/Agency/Test/Test.csproj/TestResults/coverage.opencover.xml
          gist-filename: code-coverage.json
          gist-id: 74dc33e69907cf01d90d9fb8cdec832b
          gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}    
          
      - name: Print code coverage
        run: echo "Code coverage percentage ${{steps.create_coverage_badge.outputs.percentage}}%"

      - name: Print badge data
        run: echo "Badge data ${{steps.test_step.outputs.badge}}"


  # Create a Linux deployment
  build_linux:

    name: Build_Linux
    runs-on: ubuntu-latest
    needs: [Test_Linux]
    strategy:
      matrix:
        dotnet-version: ['5.0.x' ]

    env:
      Solution_Name: Agency.sln                         
      Test_Project_Path: Agency.Test\Agency.Test.csproj

    steps:
      - uses: actions/checkout@v2

      # Install the .NET Core workload
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      # Install any dependencies
      - name: Install dependencies
        run: dotnet restore

      # Restore the project
      - name: Build
        run: dotnet build --configuration Release --no-restore

      # Pack the project
      - name: Pack
        run: dotnet pack --configuration Release

     # Archive the dll
      - name: Archive dll
        uses: actions/upload-artifact@v2
        with:
          name: linux-${{ matrix.dotnet-version }}-dll
          path: /home/runner/work/Agency/Agency/Agency/bin/Release/net5.0/Agency.dll

    # Archive the nupkg
      - name: Archive nupkg
        uses: actions/upload-artifact@v2
        with:
          name: linux-${{ matrix.dotnet-version }}-nupkg
          path: /home/runner/work/Agency/Agency/Agency/bin/Release/*.nupkg

  # Create a Windows deployment
  build_windows:
    name: Build_Windows
    runs-on: windows-latest
    needs: [Test_Linux]
    strategy:
       matrix:
         dotnet-version: ['5.0.x' ]

    env:
       Solution_Name: Agency.sln                         
       Test_Project_Path: Agency.Test\Agency.Test.csproj

    steps:
      - uses: actions/checkout@v2

      # Install the .NET Core workload
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      # Install any dependencies
      - name: Install dependencies
        run: dotnet restore

      # Restore the project
      - name: Build
        run: dotnet build --configuration Release --no-restore

      # Pack the project
      - name: Pack
        run: dotnet pack --configuration Release

      # Archive the dll
      - name: Archive dll
        uses: actions/upload-artifact@v2
        with:
          name: windows-${{ matrix.dotnet-version }}-dll
          path: D:\a\Agency\Agency\Agency\bin\Release\net5.0\Agency.dll

    # Archive the nupkg
      - name: Archive nupkg
        uses: actions/upload-artifact@v2
        with:
          name: windows-${{ matrix.dotnet-version }}-nupkg
          path: D:\a\Agency\Agency\Agency\bin\Release\*.nupkg